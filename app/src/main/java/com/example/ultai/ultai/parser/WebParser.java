package com.example.ultai.ultai.parser;

import android.util.Log;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ConnectionPool;
import okhttp3.CacheControl;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.net.URLEncoder;
import org.json.JSONObject;

public class WebParser {
    private static final String TAG = "WebParser";
    private final OkHttpClient client;
    private static final Map<String, String> USER_AGENTS = new HashMap<>();
    private final ExecutorService executorService;
    
    static {
        USER_AGENTS.put("Chrome", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
        USER_AGENTS.put("Firefox", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0");
        USER_AGENTS.put("Safari", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15");
    }

    public WebParser() {
        client = new OkHttpClient.Builder()
                .connectTimeout(20, TimeUnit.SECONDS)
                .readTimeout(20, TimeUnit.SECONDS)
                .writeTimeout(20, TimeUnit.SECONDS)
                .connectionPool(new ConnectionPool(5, 30, TimeUnit.SECONDS))
                .retryOnConnectionFailure(true)
                .build();
        
        executorService = Executors.newFixedThreadPool(3); // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    }

    public String getWeatherInfo(String city) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞
            String yandexUrl = "https://yandex.ru/pogoda/" + city;
            Document doc = getDocument(yandexUrl);
            
            if (doc != null) {
                Element weatherBlock = doc.selectFirst(".temp");
                Element feelsLike = doc.selectFirst(".feels-like");
                Element humidity = doc.selectFirst(".humidity");
                Element wind = doc.selectFirst(".wind");
                Element pressure = doc.selectFirst(".pressure");
                
                if (weatherBlock == null) {
                    return "üå°Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ " + city;
                }
                
                StringBuilder result = new StringBuilder();
                result.append("üå°Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ").append(city).append(":\n");
                result.append("‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ").append(weatherBlock != null ? weatherBlock.text() : "–ù/–î").append("\n");
                result.append("‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ").append(feelsLike != null ? feelsLike.text() : "–ù/–î").append("\n");
                result.append("‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: ").append(humidity != null ? humidity.text() : "–ù/–î").append("\n");
                result.append("‚Ä¢ –í–µ—Ç–µ—Ä: ").append(wind != null ? wind.text() : "–ù/–î").append("\n");
                result.append("‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: ").append(pressure != null ? pressure.text() : "–ù/–î");
                
                return result.toString();
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–≥–æ–¥—ã: " + e.getMessage());
        }
        return "üå°Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    public String getCurrencyRates() {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            String url = "https://www.cbr.ru/currency_base/daily/";
            Document doc = getDocument(url);
            
            if (doc != null) {
                Elements rates = doc.select(".data tr");
                StringBuilder result = new StringBuilder();
                result.append("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n");
                
                for (Element rate : rates) {
                    if (rate.selectFirst("td") != null) {
                        String currency = rate.select("td").get(1).text();
                        String value = rate.select("td").get(4).text();
                        String change = rate.select("td").get(5).text();
                        result.append(String.format("‚Ä¢ %s: %s ‚ÇΩ (%s%%)\n", 
                            currency, value, change));
                    }
                }
                
                return result.toString();
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: " + e.getMessage());
        }
        return "üí± –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    public String getStockPrices(String symbol) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω –∞–∫—Ü–∏–π
            String url = "https://finance.yahoo.com/quote/" + symbol;
            Document doc = getDocument(url);
            
            if (doc != null) {
                Element price = doc.selectFirst("[data-test=qsp-price]");
                Element change = doc.selectFirst("[data-test=qsp-price-change]");
                Element volume = doc.selectFirst("[data-test=TD_VOLUME-value]");
                
                StringBuilder result = new StringBuilder();
                result.append("üìà –ê–∫—Ü–∏–∏ ").append(symbol).append(":\n");
                result.append("‚Ä¢ –¶–µ–Ω–∞: $").append(price.text()).append("\n");
                result.append("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ").append(change.text()).append("\n");
                result.append("‚Ä¢ –û–±—ä–µ–º: ").append(volume.text());
                
                return result.toString();
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ü–µ–Ω –∞–∫—Ü–∏–π: " + e.getMessage());
        }
        return "üìà –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –∞–∫—Ü–∏–π " + symbol + ". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    public String getNews(String query) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π
            String url = "https://news.google.com/search?q=" + query + "&hl=ru&gl=RU&ceid=RU:ru";
            Document doc = getDocument(url);
            
            if (doc != null) {
                Elements news = doc.select("article");
                StringBuilder result = new StringBuilder();
                result.append("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"").append(query).append("\":\n\n");
                
                for (int i = 0; i < Math.min(5, news.size()); i++) {
                    Element article = news.get(i);
                    String title = article.select("h3").text();
                    String link = article.select("a").attr("href");
                    String source = article.select(".QmrVtf").text();
                    String time = article.select(".hvbAAd").text();
                    
                    result.append(String.format("%d. %s\n", i + 1, title));
                    result.append("   –ò—Å—Ç–æ—á–Ω–∏–∫: ").append(source).append(" | ").append(time).append("\n");
                    result.append("   –°—Å—ã–ª–∫–∞: ").append(link).append("\n\n");
                }
                
                return result.toString();
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ—Å—Ç–µ–π: " + e.getMessage());
        }
        return "üì∞ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.";
    }

    public String getGeneralInfo(String query) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ Google Knowledge Graph
            String url = "https://www.google.com/search?q=" + query;
            Document doc = getDocument(url);
            
            if (doc != null) {
                StringBuilder result = new StringBuilder();
                
                // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                Element knowledgeGraph = doc.selectFirst(".kno-rdesc");
                if (knowledgeGraph != null) {
                    result.append("üìö –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n");
                    result.append(knowledgeGraph.text()).append("\n\n");
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                Elements news = doc.select(".g");
                if (!news.isEmpty()) {
                    result.append("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n");
                    for (int i = 0; i < Math.min(3, news.size()); i++) {
                        Element article = news.get(i);
                        String title = article.select("h3").text();
                        String link = article.select("a").attr("href");
                        String source = article.select(".VuuXrf").text();
                        result.append(String.format("%d. %s\n", i + 1, title));
                        result.append("   –ò—Å—Ç–æ—á–Ω–∏–∫: ").append(source).append("\n");
                        result.append("   –°—Å—ã–ª–∫–∞: ").append(link).append("\n\n");
                    }
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                Elements stats = doc.select(".Z0LcW");
                if (!stats.isEmpty()) {
                    result.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n");
                    for (Element stat : stats) {
                        result.append("‚Ä¢ ").append(stat.text()).append("\n");
                    }
                }
                
                if (result.length() > 0) {
                    return result.toString();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }
        return "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.";
    }

    public String getWikipediaInfo(String query) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ Wikipedia
            String url = "https://ru.wikipedia.org/wiki/" + query;
            Document doc = getDocument(url);
            
            if (doc != null) {
                StringBuilder result = new StringBuilder();
                result.append("üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Wikipedia:\n\n");
                
                // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                Element summary = doc.selectFirst(".mw-parser-output > p");
                if (summary != null) {
                    result.append(summary.text()).append("\n\n");
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                Elements facts = doc.select(".infobox tr");
                if (!facts.isEmpty()) {
                    result.append("üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n");
                    for (Element fact : facts) {
                        String label = fact.select("th").text();
                        String value = fact.select("td").text();
                        if (!label.isEmpty() && !value.isEmpty()) {
                            result.append("‚Ä¢ ").append(label).append(": ").append(value).append("\n");
                        }
                    }
                }
                
                if (result.length() > 30) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    return result.toString();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Wikipedia: " + e.getMessage());
        }
        return "üìñ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.";
    }

    public String getMarketInfo(String query) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ —Ä—ã–Ω–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            String url = "https://www.google.com/finance/quote/" + query;
            Document doc = getDocument(url);
            
            if (doc != null) {
                StringBuilder result = new StringBuilder();
                result.append("üìà –†—ã–Ω–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n");
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                Element price = doc.selectFirst("[data-last-price]");
                if (price != null) {
                    result.append("‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ").append(price.text()).append("\n");
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                Element change = doc.selectFirst("[data-price-change]");
                if (change != null) {
                    result.append("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ").append(change.text()).append("\n");
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
                Element volume = doc.selectFirst("[data-volume]");
                if (volume != null) {
                    result.append("‚Ä¢ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ").append(volume.text()).append("\n");
                }
                
                if (result.length() > 30) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    return result.toString();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }
        return "üìà –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.";
    }

    public String getSportsInfo(String query) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            String url = "https://www.google.com/search?q=" + query + "&tbm=nws&tbs=sbd:1";
            Document doc = getDocument(url);
            
            if (doc != null) {
                StringBuilder result = new StringBuilder();
                result.append("‚öΩ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n");
                
                Elements news = doc.select(".g");
                for (int i = 0; i < Math.min(5, news.size()); i++) {
                    Element article = news.get(i);
                    String title = article.select("h3").text();
                    String link = article.select("a").attr("href");
                    String source = article.select(".VuuXrf").text();
                    String time = article.select(".LfVVr").text();
                    
                    result.append(String.format("%d. %s\n", i + 1, title));
                    result.append("   –ò—Å—Ç–æ—á–Ω–∏–∫: ").append(source).append(" | ").append(time).append("\n");
                    result.append("   –°—Å—ã–ª–∫–∞: ").append(link).append("\n\n");
                }
                
                if (result.length() > 30) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    return result.toString();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }
        return "‚öΩ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    public String getTechInfo(String query) {
        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            String url = "https://www.google.com/search?q=" + query + "&tbm=nws&tbs=sbd:1";
            Document doc = getDocument(url);
            
            if (doc != null) {
                StringBuilder result = new StringBuilder();
                result.append("üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n");
                
                Elements news = doc.select(".g");
                for (int i = 0; i < Math.min(5, news.size()); i++) {
                    Element article = news.get(i);
                    String title = article.select("h3").text();
                    String link = article.select("a").attr("href");
                    String source = article.select(".VuuXrf").text();
                    String time = article.select(".LfVVr").text();
                    
                    result.append(String.format("%d. %s\n", i + 1, title));
                    result.append("   –ò—Å—Ç–æ—á–Ω–∏–∫: ").append(source).append(" | ").append(time).append("\n");
                    result.append("   –°—Å—ã–ª–∫–∞: ").append(link).append("\n\n");
                }
                
                if (result.length() > 30) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    return result.toString();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }
        return "üíª –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
     * @param topic —Ç–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     * @return –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
     */
    public String getPhotoInfo(String topic) {
        try {
            String url = "https://www.google.com/search?q=" + URLEncoder.encode(topic + " —Ñ–æ—Ç–æ", "UTF-8") + "&tbm=isch";
            Document doc = getDocument(url);
            
            if (doc == null) {
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ —Ç–µ–º–µ: " + topic;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            Elements stats = doc.select("div#result-stats");
            String statsText = stats.isEmpty() ? "" : stats.first().text();
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            Elements descriptions = doc.select("div.rg_meta");
            List<String> imageDescriptions = new ArrayList<>();
            
            for (Element description : descriptions) {
                try {
                    String json = description.text();
                    JSONObject jsonObject = new JSONObject(json);
                    String imageDesc = jsonObject.optString("pt", "");
                    if (!imageDesc.isEmpty()) {
                        imageDescriptions.add(imageDesc);
                    }
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏–π
                    if (imageDescriptions.size() >= 5) {
                        break;
                    }
                } catch (Exception e) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", e);
                }
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            StringBuilder result = new StringBuilder();
            result.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –ø–æ —Ç–µ–º–µ \"").append(topic).append("\":\n\n");
            
            if (!statsText.isEmpty()) {
                result.append("–ù–∞–π–¥–µ–Ω–æ: ").append(statsText).append("\n\n");
            }
            
            result.append("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ:\n");
            Elements relatedSearches = doc.select("div.brs_col a");
            int relatedCount = 0;
            
            for (Element related : relatedSearches) {
                String relatedText = related.text();
                if (!relatedText.isEmpty()) {
                    result.append("- ").append(relatedText).append("\n");
                    relatedCount++;
                    
                    if (relatedCount >= 5) {
                        break;
                    }
                }
            }
            
            if (relatedCount == 0) {
                result.append("- –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n");
            }
            
            result.append("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Ç–µ–º–µ \"").append(topic).append("\" —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã:\n");
            result.append("1. Google –ö–∞—Ä—Ç–∏–Ω–∫–∏: https://images.google.com/\n");
            result.append("2. –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∏–Ω–∫–∏: https://yandex.ru/images/\n");
            result.append("3. Unsplash: https://unsplash.com/\n");
            result.append("4. Pinterest: https://pinterest.com/\n");
            
            return result.toString();
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö", e);
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –ø–æ —Ç–µ–º–µ: " + topic;
        }
    }

    private Document getDocument(String url) throws IOException {
        Request request = new Request.Builder()
                .url(url)
                .addHeader("User-Agent", USER_AGENTS.get("Chrome"))
                .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
                .addHeader("Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3")
                .cacheControl(new CacheControl.Builder().maxStale(10, TimeUnit.MINUTES).build()) // –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                .build();

        try (Response response = client.newCall(request).execute()) {
            if (response.isSuccessful() && response.body() != null) {
                return Jsoup.parse(response.body().string());
            }
        }
        return null;
    }

    public void shutdown() {
        client.dispatcher().executorService().shutdown();
        executorService.shutdown();
    }
} 